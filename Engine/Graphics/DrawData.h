#pragma once
#include "../Utility/Coordinate.h"

const unsigned SPRITES_COUNT = 2;
enum Sprites {
	// TODO здесь будут спрайты всех объектов
};

const unsigned VIEWS_COUNT = 2;
enum Views {
	BASIC,
	TEST
};

/*!
* Система "точек зрения" View отдалённо напоминает систему камер.
* 
* real_size - размер зоны в пикселях, на которой будут рисоваться спрайты, к которому применили данный View
* position - позиция верхнего левого угла зоны в пикселях. 
* Так, если position = (100, 200), то при рисовании спрайта с позицией (0, 0) с применением данного View, его реальная позиция
* окажется в (100, 200) пикселях относительно верхнего левого угла окна
* 
* virtual_size - размер зоны, в которой находятся спрайты до применения к ним данного View.
* Так, если position = (0, 0), real_size = (1600, 900), а virtual_size = (1, 1), то если мы нарисуем спрайт
* с координатами (0.5, 0.5), то его изображение попадёт в точку (800, 450) на окне (в пикселях)
* 
* Например, с помощью этой системы, можно не заботиться о координатной системе игрового поля, ведь её можно задать не в пикселях,
* а в более удобных единицах. А при рисовании применять нужный View, чтобы переводить эти координаты в позицию на реальном экране
*/
struct View
{
	Vector2F virtual_size;
	Vector2F real_size;
	Vector2F position;
};

/*!
* Структура, содержащая информацию о всех преобразованиях спрайта, который нужно нарисовать на экране.
* Имеет конструкторы для более простой инициализации
*/
struct DrawData
{
	DrawData();
	DrawData(unsigned id, unsigned lr, Vector2F& pos);
	DrawData(unsigned id, unsigned lr, float x, float y);
	DrawData(unsigned id, unsigned lr, Vector2F& pos, float rot);
	DrawData(unsigned id, unsigned lr, float x, float y, float rot);

	unsigned spriteID; //! ID спрайта, используйте enum Sprites
	unsigned layer; //! Номер слоя. Чем больше значение, тем "выше" спрайт (перекроет всё что имеет меньший слой)

	Vector2F position; //! Позиция центра спрайта в пространстве
	Vector2F origin; //! Где находится центр спрайта относительно его левого верхнего угла В ПИКСЕЛЯХ
	Vector2F scale; //! Степень сжатия/растяжения. (1, 1) - спрайт без изменений. Отрицательные значения приведут к отражению по оси
	float rotation; //! Угол поворота спрайта В ГРАДУСАХ, против часовой стрелки
	int frame; //! Пока никак не используется. Кадр анимации
};
