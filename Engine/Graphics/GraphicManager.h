#pragma once
#include <SFML/Graphics.hpp>
#include <vector>
#include <list>
#include "DrawData.h"
#include "../Utility/Coordinate.h"

/*!
* Статичный класс, предназначенный для работы с графикой. 
* 
* Единсвенная функция, которая может быть вызвана в игровом коде - функция Draw, чтобы нарисовать данный спрайт,
* об остальном система позаботиться за вас.
* 
* Это один из немногих модулей, зависимых от SFML (остальное, в теории, может использоваться без него).
* Если появится необходимость пересесть с SFML на что-то другое, нужно будет переписать данный класс
* (а также TimeManager и InputManager), сохранив назначение функций (тогда не потребуется полное переписывание остального кода)
* 
* Спрайты хранятся непосредственно внутри данного класса. Объекты хранят только ID своих спрайтов в виде enum Sprites
* 
* Отрисовка зависит от DrawData и View.
* DrawData - информация о том, что, как и где нужно отрисовать (подробно в соответствующем файле)
* View отвечает за постобработку.
* Используя View можно не заботиться о попиксельном расчёте положений структур. Подробнее о том как работает View находится в DrawData.h
* 
* СИСТЕМНОЕ
*/
class GraphicManager
{
public:

	//! Инициализация, проходит автоматически
	static void Init();
	
	//! Обновление происходит каждый кадр
	static bool Update();

	//! Выход вызывается при закрытии окна. Схлопывает всю игру, приводит к её завершению
	static void Exit();

	//static void LoadPack();
	//! Нарисовать спрайт согласно DrawData, применив к нему View и view_id. data при этом необратимо портится!!!
	static void Draw(DrawData& data, Views view_id = Views::BASIC);

	//! Применяет к data соответствующий View. При этом data изменяется!
	static void SetView(DrawData& data, Views view_id);
private:
	static sf::RenderWindow window; //! Окно SFML, на котором происходит вся отрисовка

	static std::vector<sf::Texture> textures; //! Массив всех текстур игры. Загружается при Init, требуется для хранения спрайтов
	static std::vector<sf::Sprite> sprites; //! Массив всех спрайтов игры. Загружается при Init.

	static std::vector<std::list<sf::Sprite>> to_draw; //! Массив всех спрайтов, которые нужно нарисовать в данный кадр

	static std::vector<View> views; //! Массив всех Views. На данный момент заполняется вручную

	static const unsigned LAYER_COUNT; //! Число всех слоёв отрисовки. НЕ ПУТАТЬ СО СЛОЯМИ ОБЪЕКТОВ. Отвечает за то, какие спрайты перекроет данный спрайт, а какие нет
};

